diff --git a/plugins/c9.core/settings.js b/plugins/c9.core/settings.js
index b9cb93d..737bab9 100644
--- a/plugins/c9.core/settings.js
+++ b/plugins/c9.core/settings.js
@@ -22,7 +22,7 @@ define(function(require, exports, module) {
         /***** Initialization *****/
         
         var plugin = new Plugin("Ajax.org", main.consumes);
-        var emit = plugin.getEmitter();
+        var emit= plugin.getEmitter();
         
         // Give the info, ext plugin a reference to settings
         info.settings = plugin;
@@ -31,6 +31,21 @@ define(function(require, exports, module) {
         // We'll have a lot of listeners, so upping the limit
         emit.setMaxListeners(10000);
         
+        var $emitter = function(){
+            var args = [];
+            for (var j = 0; j < arguments.length; j++) { 
+                args.push(arguments[j]);
+            }
+            if(window && !window.name != "" && window.children)
+                for(var i in window.children){
+                    if(window.children[i] && window.children[i].app && !window.children[i].closed)
+                    window.children[i].app.settings.emitter.apply(null,args);
+                }
+            else if(window.opener){
+                window.opener.app.settings.emitter.apply(null,args);
+            }
+        };
+        
         var resetSettings = options.reset || c9.location.match(/reset=([\w\|]*)/) && RegExp.$1;
         var develMode = c9.location.indexOf("devel=1") > -1;
         var debugMode = c9.location.indexOf("debug=2") > -1;
@@ -51,13 +66,17 @@ define(function(require, exports, module) {
         var KEYS = Object.keys(PATH);
         
         var saveToCloud = {};
-        var model = {};
+        var model = window.opener && window.opener.app && window.opener.app.settings ? window.opener.app.settings.model : {};
+        var altState = window.name;
+        var popupNodes = ["console", "experiments", "ext", "findinfiles", "menus", "nak", "panecycle", "panels", "popup", "projecttree", "tabs", "tree_selection"];
         var cache = {};
         var diff = 0; // TODO should we allow this to be undefined and get NaN in timestamps?
         var userData;
         
         var inited = false;
         function loadSettings(json) {
+            if(window.opener&& window.opener.app) json = JSON.stringify(window.opener.app.settings.model)
+            
             if (!json) {
                 // Load from TEMPLATE
                 if (options.settings == "defaults" || testing)
@@ -138,23 +157,25 @@ define(function(require, exports, module) {
         }
     
         function save(force, sync) {
+            if(altState != "") window.opener.app.settings.save(force, sync);
             dirty = true;
     
             if (force) {
-                saveToFile();
+                saveToFile(sync);
                 startTimer();
             }
         }
     
         function saveToFile(sync) {
-            if (c9.readonly || !plugin.loaded) 
+            if (c9.readonly || !plugin.loaded || altState !== "") 
                 return;
             
             if (c9.debug)
                 console.log("Saving Settings...");
                 
             emit("write", { model : model });
-    
+            $emitter("write", { model : model });
+            
             model.time = new Date().getTime();
     
             if (develMode) {
@@ -241,6 +262,11 @@ define(function(require, exports, module) {
                         ext: plugin,
                         reset: isReset
                     });
+                    $emitter("read", {
+                        model: model,
+                        ext: plugin,
+                        reset: isReset
+                    });
                 } catch (e) {
                     fs.writeFile(PATH.project 
                         + ".broken", JSON.stringify(json), function(){});
@@ -254,6 +280,11 @@ define(function(require, exports, module) {
                         ext: plugin,
                         reset: isReset
                     });
+                    $emitter("read", {
+                        model: model,
+                        ext: plugin,
+                        reset: isReset
+                    });
                 }
             }
             else {
@@ -262,6 +293,11 @@ define(function(require, exports, module) {
                     ext: plugin,
                     reset: isReset
                 });
+                $emitter("read", {
+                    model: model,
+                    ext: plugin,
+                    reset: isReset
+                });
             }
             
             if (inited)
@@ -295,6 +331,7 @@ define(function(require, exports, module) {
 
             c9.on("beforequit", function(){
                 emit("write", { model: model, unload: true });
+                $emitter("write", { model: model, unload: true });
                 saveModel(true); //Forcing sync xhr works in chrome 
             }, plugin);
 
@@ -332,12 +369,15 @@ define(function(require, exports, module) {
                 if (!node.hasOwnProperty(name)) {
                     node[name] = a[1];
                     emit(path + "/" + name, a[1]);
+                    $emitter(path + "/" + name, a[1]);
                     changed = true;
                 }
             });
             
-            if (changed)
+            if (changed){
                 emit(path);
+                $emitter(path);
+            }
         }
         
         function update(type, json, ud){
@@ -374,6 +414,11 @@ define(function(require, exports, module) {
             if (!inited && !isDefault) return false;
             
             var parts = query.split("/");
+            
+            if(parts[0]=="state" && altState !== "" && popupNodes.indexOf(parts[1])  != -1){
+                parts.splice(1, 0, altState);
+            }
+                
             var key = parts.pop();
             if (!isNode && key.charAt(0) !== "@") {
                 parts.push(key);
@@ -400,6 +445,12 @@ define(function(require, exports, module) {
             // Tell everyone it's parent changed
             emit(query, value, oldValue);
             
+            // Tell everyone this property changed
+            $emitter(parts.join("/"), value, oldValue);
+            // Tell everyone it's parent changed
+            $emitter(query, value, oldValue);
+            
+            
             // Tell everyone the root type changed (user, project, state)
             scheduleAnnounce(parts[0], userData);
             
@@ -413,6 +464,7 @@ define(function(require, exports, module) {
             clearTimeout(timers[type]);
             timers[type] = setTimeout(function(){ 
                 emit("change:" + type, { data: model[type], userData: userData }); 
+                $emitter("change:" + type, { data: model[type], userData: userData }); 
             });
         }
         
@@ -455,6 +507,11 @@ define(function(require, exports, module) {
         
         function get(query, isNode) {
             var parts = query.split("/");
+            
+            if(parts[0]=="state" && altState !== "" &&  popupNodes.indexOf(parts[1])  != -1){
+                parts.splice(1, 0, altState);
+            }
+            
             if (!isNode && parts[parts.length - 1].charAt(0) !== "@")
                 parts.push("json()");
             
@@ -680,7 +737,9 @@ define(function(require, exports, module) {
              * @param {String} type
              * @param {Object} settings
              */
-            update: update
+            update: update,
+            
+            emitter:emit
         });
         
         if (c9.connected || options.settings) 
diff --git a/plugins/c9.ide.terminal/terminal.js b/plugins/c9.ide.terminal/terminal.js
index 9ae0d83..96bc60a 100644
--- a/plugins/c9.ide.terminal/terminal.js
+++ b/plugins/c9.ide.terminal/terminal.js
@@ -954,6 +954,9 @@ define(function(require, exports, module) {
 
                 // When document gets unloaded everything should be cleaned up
                 doc.on("unload", function(){
+                    //if tab is detaching dont kill or distroy the process
+                    if(doc.tab.meta.$detach)
+                        return;
                     // Stop the shell process at the remote machine
                     if (!options.testing)
                         session.kill();
